method = "rf", trControl=fitControl)
rf.fit
rf.fit$bestTune
#Model 2
#with tuning parameters
fitControl <- trainControl(
method = "repeatedcv",
number = 10, repeats = 5)
rf.tune <- expand.grid(mtry=c(1, 4, 8))
rf.fit1 <- train(Disease ~ ., data = raw.data,
method = "rf", trControl=fitControl, tuneGrid=rf.tune)
rf.fit1
rf.fit1$bestTune
fitControl <- trainControl(
method = "repeatedcv",
number = 10, repeats = 5)
knn.fit <- train(Disease ~ ., data = raw.data,
method = "knn", trControl=fitControl)
knn.fit
knn.fit$bestTune
#Model 3
fitControl <- trainControl(
method = "repeatedcv",
number = 5, repeats = 3)
knn.fit <- train(Disease ~ ., data = raw.data,
method = "knn", trControl=fitControl)
knn.fit
knn.fit$bestTune
#Model 4
#with tuning parameters
fitControl <- trainControl(
method = "repeatedcv",
number = 10, repeats = 5)
rf.tune <- expand.grid(mtry=c(6,7,8,9))
rf.fit2 <- train(Disease ~ ., data = raw.data,
method = "rf", trControl=fitControl, tuneGrid=rf.tune)
rf.fit2
rf.fit2$bestTune
library(caret)
library(tidyverse)
library(dplyr)
library(doParallel)
registerDoParallel(cores=7)
# Utility functions
clean.cell <- function(x) {
x <- trimws(x)
return(gsub(" ", "", x))
}
#Importing the raw data and doing basic imputation =============================
raw.data <- read.csv("data/dataset.csv", na.strings = c("NA", ""))
glimpse(raw.data)
#Replacing NA values with -1 or -9999 and trimming the blank space
raw.data <- data.frame(lapply(raw.data, clean.cell), stringsAsFactors = FALSE)
raw.data[is.na(raw.data)] = -1
# raw.data <- mutate_if(raw.data, is.character, as.factor)
glimpse(raw.data)
## Getting all the Symptoms
Symptoms <- cbind(raw.data$Symptom_1, raw.data$Symptom_2, raw.data$Symptom_3 , raw.data$Symptom_4,
raw.data$Symptom_5,raw.data$Symptom_6, raw.data$Symptom_7, raw.data$Symptom_8,
raw.data$Symptom_9, raw.data$Symptom_10,raw.data$Symptom_11, raw.data$Symptom_12,
raw.data$Symptom_13, raw.data$Symptom_14, raw.data$Symptom_15,
raw.data$Symptom_16, raw.data$Symptom_17)
# Converting all the vectors into one vector
Symptoms <- as.vector(Symptoms)
Symptoms <- Symptoms[Symptoms!=-1] # Removing NA's or NA represenation (-1)
Symptoms <- unique(Symptoms)
# View(data.frame(Symptoms))
length(Symptoms) # 131 Symptoms
## Wrangling the Raw data from semi-long form to wide form ===========================================
clean.data <- raw.data %>%
rowwise() %>% #To make the operation row wise
mutate(Symptoms=paste(Symptom_1,Symptom_2,Symptom_3,Symptom_4,
Symptom_5,Symptom_6,Symptom_7,Symptom_8,
Symptom_9,Symptom_10,Symptom_11,Symptom_12,
Symptom_13,Symptom_14,Symptom_15,Symptom_16,
Symptom_17, sep = ", ")) %>% #To attach all symptoms as one
ungroup() %>% # To remove row wise operation
select(Disease, Symptoms) #Selecting only disease and all its symptoms
# Pulling unique symptoms for each Disease
clean.data$Symptoms <- sapply(strsplit(clean.data$Symptoms, ", "),
function(x) paste(unique(x), collapse=", "))
Symptoms <- sort(Symptoms)
for(i in 1:length(Symptoms)) {
clean.data[, Symptoms[i]] <- NA
}
glimpse(clean.data)
for(i in 1:nrow(clean.data)) {
temp.symptoms <- strsplit(as.character(clean.data[i, "Symptoms"]), ", ") %>%
as.data.frame()
temp.symptoms <- as.vector(temp.symptoms[,1])
for(j in 1:length(temp.symptoms)) {
clean.data[i, temp.symptoms[j]] <- TRUE
}
}
clean.data[is.na(clean.data)] <- FALSE
View(clean.data)
## Modelling ===============================================
#Model 1
fitControl <- trainControl(
method = "repeatedcv",
number = 10, repeats = 5)
rf.fit <- train(Disease ~ ., data = clean.data,
method = "rf", trControl=fitControl)
# rf.fit
#
# rf.fit$bestTune
#Model 2
#with tuning parameters
fitControl <- trainControl(
method = "repeatedcv",
number = 10, repeats = 5)
rf.tune <- expand.grid(mtry=seq(60, 74, 1))
rf.fit1 <- train(Disease ~ ., data = raw.data,
method = "rf", trControl=fitControl, tuneGrid=rf.tune)
library(caret)
library(tidyverse)
library(dplyr)
library(doParallel)
registerDoParallel(cores=5)
# Utility functions
clean.cell <- function(x) {
x <- trimws(x)
return(gsub(" ", "", x))
}
#Importing the raw data and doing basic imputation =============================
raw.data <- read.csv("data/dataset.csv", na.strings = c("NA", ""))
glimpse(raw.data)
#Replacing NA values with -1 or -9999 and trimming the blank space
raw.data <- data.frame(lapply(raw.data, clean.cell), stringsAsFactors = FALSE)
raw.data[is.na(raw.data)] = -1
# raw.data <- mutate_if(raw.data, is.character, as.factor)
glimpse(raw.data)
## Getting all the Symptoms
Symptoms <- cbind(raw.data$Symptom_1, raw.data$Symptom_2, raw.data$Symptom_3 , raw.data$Symptom_4,
raw.data$Symptom_5,raw.data$Symptom_6, raw.data$Symptom_7, raw.data$Symptom_8,
raw.data$Symptom_9, raw.data$Symptom_10,raw.data$Symptom_11, raw.data$Symptom_12,
raw.data$Symptom_13, raw.data$Symptom_14, raw.data$Symptom_15,
raw.data$Symptom_16, raw.data$Symptom_17)
# Converting all the vectors into one vector
Symptoms <- as.vector(Symptoms)
Symptoms <- Symptoms[Symptoms!=-1] # Removing NA's or NA represenation (-1)
Symptoms <- unique(Symptoms)
# View(data.frame(Symptoms))
length(Symptoms) # 131 Symptoms
## Wrangling the Raw data from semi-long form to wide form ===========================================
clean.data <- raw.data %>%
rowwise() %>% #To make the operation row wise
mutate(Symptoms=paste(Symptom_1,Symptom_2,Symptom_3,Symptom_4,
Symptom_5,Symptom_6,Symptom_7,Symptom_8,
Symptom_9,Symptom_10,Symptom_11,Symptom_12,
Symptom_13,Symptom_14,Symptom_15,Symptom_16,
Symptom_17, sep = ", ")) %>% #To attach all symptoms as one
ungroup() %>% # To remove row wise operation
select(Disease, Symptoms) #Selecting only disease and all its symptoms
# Pulling unique symptoms for each Disease
clean.data$Symptoms <- sapply(strsplit(clean.data$Symptoms, ", "),
function(x) paste(unique(x), collapse=", "))
Symptoms <- sort(Symptoms)
for(i in 1:length(Symptoms)) {
clean.data[, Symptoms[i]] <- NA
}
glimpse(clean.data)
for(i in 1:nrow(clean.data)) {
temp.symptoms <- strsplit(as.character(clean.data[i, "Symptoms"]), ", ") %>%
as.data.frame()
temp.symptoms <- as.vector(temp.symptoms[,1])
for(j in 1:length(temp.symptoms)) {
clean.data[i, temp.symptoms[j]] <- TRUE
}
}
clean.data[is.na(clean.data)] <- FALSE
clean.data$Symptoms <- NULL
clean.data$`-1` <- NULL
clean.data$Disease <- as.factor(clean.data$Disease)
View(clean.data)
glimpse(clean.data)
fitControllogR <- trainControl(
method = "cv",
number = 5)
logR.fit <- train(Disease ~ ., data = clean.data,
method = "glm", trControl=fitControllogR, family= "binomial" )
logR.fit
library(caret)
library(tidyverse)
library(dplyr)
#library(doParallel)
#registerDoParallel(cores=5)
# Utility functions
clean.cell <- function(x) {
x <- trimws(x)
return(gsub(" ", "", x))
}
#Importing the raw data and doing basic imputation =============================
raw.data <- read.csv("data/dataset.csv", na.strings = c("NA", ""))
glimpse(raw.data)
#Replacing NA values with -1 or -9999 and trimming the blank space
raw.data <- data.frame(lapply(raw.data, clean.cell), stringsAsFactors = FALSE)
raw.data[is.na(raw.data)] = -1
# raw.data <- mutate_if(raw.data, is.character, as.factor)
glimpse(raw.data)
## Getting all the Symptoms
Symptoms <- cbind(raw.data$Symptom_1, raw.data$Symptom_2, raw.data$Symptom_3 , raw.data$Symptom_4,
raw.data$Symptom_5,raw.data$Symptom_6, raw.data$Symptom_7, raw.data$Symptom_8,
raw.data$Symptom_9, raw.data$Symptom_10,raw.data$Symptom_11, raw.data$Symptom_12,
raw.data$Symptom_13, raw.data$Symptom_14, raw.data$Symptom_15,
raw.data$Symptom_16, raw.data$Symptom_17)
# Converting all the vectors into one vector
Symptoms <- as.vector(Symptoms)
Symptoms <- Symptoms[Symptoms!=-1] # Removing NA's or NA represenation (-1)
Symptoms <- unique(Symptoms)
# View(data.frame(Symptoms))
length(Symptoms) # 131 Symptoms
## Wrangling the Raw data from semi-long form to wide form ===========================================
clean.data <- raw.data %>%
rowwise() %>% #To make the operation row wise
mutate(Symptoms=paste(Symptom_1,Symptom_2,Symptom_3,Symptom_4,
Symptom_5,Symptom_6,Symptom_7,Symptom_8,
Symptom_9,Symptom_10,Symptom_11,Symptom_12,
Symptom_13,Symptom_14,Symptom_15,Symptom_16,
Symptom_17, sep = ", ")) %>% #To attach all symptoms as one
ungroup() %>% # To remove row wise operation
select(Disease, Symptoms) #Selecting only disease and all its symptoms
# Pulling unique symptoms for each Disease
clean.data$Symptoms <- sapply(strsplit(clean.data$Symptoms, ", "),
function(x) paste(unique(x), collapse=", "))
Symptoms <- sort(Symptoms)
for(i in 1:length(Symptoms)) {
clean.data[, Symptoms[i]] <- NA
}
glimpse(clean.data)
for(i in 1:nrow(clean.data)) {
temp.symptoms <- strsplit(as.character(clean.data[i, "Symptoms"]), ", ") %>%
as.data.frame()
temp.symptoms <- as.vector(temp.symptoms[,1])
for(j in 1:length(temp.symptoms)) {
clean.data[i, temp.symptoms[j]] <- TRUE
}
}
clean.data[is.na(clean.data)] <- FALSE
clean.data$Symptoms <- NULL
clean.data$`-1` <- NULL
clean.data$Disease <- as.factor(clean.data$Disease)
View(clean.data)
glimpse(clean.data)
fitControllogR <- trainControl(
method = "cv",
number = 5)
logR.fit <- train(Disease ~ ., data = clean.data,
method = "glm", trControl=fitControllogR, family= "binomial" )
logR.fit
library(caret)
library(tidyverse)
library(dplyr)
library(doParallel)
registerDoParallel(cores=5)
# Utility functions
clean.cell <- function(x) {
x <- trimws(x)
return(gsub(" ", "", x))
}
#Importing the raw data and doing basic imputation =============================
raw.data <- read.csv("data/dataset.csv", na.strings = c("NA", ""))
glimpse(raw.data)
#Replacing NA values with -1 or -9999 and trimming the blank space
raw.data <- data.frame(lapply(raw.data, clean.cell), stringsAsFactors = FALSE)
raw.data[is.na(raw.data)] = -1
# raw.data <- mutate_if(raw.data, is.character, as.factor)
glimpse(raw.data)
## Getting all the Symptoms
Symptoms <- cbind(raw.data$Symptom_1, raw.data$Symptom_2, raw.data$Symptom_3 , raw.data$Symptom_4,
raw.data$Symptom_5,raw.data$Symptom_6, raw.data$Symptom_7, raw.data$Symptom_8,
raw.data$Symptom_9, raw.data$Symptom_10,raw.data$Symptom_11, raw.data$Symptom_12,
raw.data$Symptom_13, raw.data$Symptom_14, raw.data$Symptom_15,
raw.data$Symptom_16, raw.data$Symptom_17)
# Converting all the vectors into one vector
Symptoms <- as.vector(Symptoms)
Symptoms <- Symptoms[Symptoms!=-1] # Removing NA's or NA represenation (-1)
Symptoms <- unique(Symptoms)
# View(data.frame(Symptoms))
length(Symptoms) # 131 Symptoms
## Wrangling the Raw data from semi-long form to wide form ===========================================
clean.data <- raw.data %>%
rowwise() %>% #To make the operation row wise
mutate(Symptoms=paste(Symptom_1,Symptom_2,Symptom_3,Symptom_4,
Symptom_5,Symptom_6,Symptom_7,Symptom_8,
Symptom_9,Symptom_10,Symptom_11,Symptom_12,
Symptom_13,Symptom_14,Symptom_15,Symptom_16,
Symptom_17, sep = ", ")) %>% #To attach all symptoms as one
ungroup() %>% # To remove row wise operation
select(Disease, Symptoms) #Selecting only disease and all its symptoms
# Pulling unique symptoms for each Disease
clean.data$Symptoms <- sapply(strsplit(clean.data$Symptoms, ", "),
function(x) paste(unique(x), collapse=", "))
Symptoms <- sort(Symptoms)
for(i in 1:length(Symptoms)) {
clean.data[, Symptoms[i]] <- NA
}
glimpse(clean.data)
for(i in 1:nrow(clean.data)) {
temp.symptoms <- strsplit(as.character(clean.data[i, "Symptoms"]), ", ") %>%
as.data.frame()
temp.symptoms <- as.vector(temp.symptoms[,1])
for(j in 1:length(temp.symptoms)) {
clean.data[i, temp.symptoms[j]] <- TRUE
}
}
clean.data[is.na(clean.data)] <- FALSE
clean.data$Symptoms <- NULL
clean.data$`-1` <- NULL
clean.data$Disease <- as.factor(clean.data$Disease)
View(clean.data)
glimpse(clean.data)
fitControllogR <- trainControl(
method = "cv",
number = 5)
logR.fit <- train(Disease ~ ., data = clean.data,
method = "glm", trControl=fitControllogR, family= "binomial" )
logR.fit
clean.data
#Model 5 Logistic Regression
fitControllogR <- trainControl(
method = "cv",
number = 5)
logR.fit <- train(Disease ~ ., data = clean.data,
method = "glm", trControl=fitControllogR, family= "binomial" )
nearZeroVar(clean.data)
length(nearZeroVar(clean.data))
length(colnames(clean.data))
nearZeroVarCols <- nearZeroVar(clean.data)
clean.data[, -nearZeroVarCols]
clean.data <- clean.data[, -nearZeroVarCols]
#Model 5 Logistic Regression
fitControllogR <- trainControl(
method = "cv",
number = 5)
logR.fit <- train(Disease ~ ., data = clean.data,
method = "glm", trControl=fitControllogR, family= "binomial" )
## Modelling ===============================================
# LDA - Dimensionality reduction
lda.fit <- train(Disease ~ ., data = clean.data, method = "lda")
lda.fit
summary(lda.fit)
lda.fit$finalModel
library(caret)
library(tidyverse)
library(dplyr)
library(doParallel)
registerDoParallel(cores=5)
# Utility functions
clean.cell <- function(x) {
x <- trimws(x)
return(gsub(" ", "", x))
}
#Importing the raw data and doing basic imputation =============================
raw.data <- read.csv("data/dataset.csv", na.strings = c("NA", ""))
glimpse(raw.data)
#Replacing NA values with -1 or -9999 and trimming the blank space
raw.data <- data.frame(lapply(raw.data, clean.cell), stringsAsFactors = FALSE)
raw.data[is.na(raw.data)] = -1
# raw.data <- mutate_if(raw.data, is.character, as.factor)
glimpse(raw.data)
## Getting all the Symptoms
Symptoms <- cbind(raw.data$Symptom_1, raw.data$Symptom_2, raw.data$Symptom_3 , raw.data$Symptom_4,
raw.data$Symptom_5,raw.data$Symptom_6, raw.data$Symptom_7, raw.data$Symptom_8,
raw.data$Symptom_9, raw.data$Symptom_10,raw.data$Symptom_11, raw.data$Symptom_12,
raw.data$Symptom_13, raw.data$Symptom_14, raw.data$Symptom_15,
raw.data$Symptom_16, raw.data$Symptom_17)
# Converting all the vectors into one vector
Symptoms <- as.vector(Symptoms)
Symptoms <- Symptoms[Symptoms!=-1] # Removing NA's or NA represenation (-1)
Symptoms <- unique(Symptoms)
# View(data.frame(Symptoms))
length(Symptoms) # 131 Symptoms
## Wrangling the Raw data from semi-long form to wide form ===========================================
clean.data <- raw.data %>%
rowwise() %>% #To make the operation row wise
mutate(Symptoms=paste(Symptom_1,Symptom_2,Symptom_3,Symptom_4,
Symptom_5,Symptom_6,Symptom_7,Symptom_8,
Symptom_9,Symptom_10,Symptom_11,Symptom_12,
Symptom_13,Symptom_14,Symptom_15,Symptom_16,
Symptom_17, sep = ", ")) %>% #To attach all symptoms as one
ungroup() %>% # To remove row wise operation
select(Disease, Symptoms) #Selecting only disease and all its symptoms
# Pulling unique symptoms for each Disease
clean.data$Symptoms <- sapply(strsplit(clean.data$Symptoms, ", "),
function(x) paste(unique(x), collapse=", "))
Symptoms <- sort(Symptoms)
for(i in 1:length(Symptoms)) {
clean.data[, Symptoms[i]] <- NA
}
glimpse(clean.data)
for(i in 1:nrow(clean.data)) {
temp.symptoms <- strsplit(as.character(clean.data[i, "Symptoms"]), ", ") %>%
as.data.frame()
temp.symptoms <- as.vector(temp.symptoms[,1])
for(j in 1:length(temp.symptoms)) {
clean.data[i, temp.symptoms[j]] <- TRUE
}
}
clean.data[is.na(clean.data)] <- FALSE
clean.data$Symptoms <- NULL
clean.data$`-1` <- NULL
clean.data$Disease <- as.factor(clean.data$Disease)
View(clean.data)
glimpse(clean.data)
nearZeroVarCols <- nearZeroVar(clean.data)
clean.data <- clean.data[, -nearZeroVarCols]
#Model 3
fitControl <- trainControl(
method = "repeatedcv",
number = 5, repeats = 3)
knn.fit <- train(Disease ~ ., data = clean.data,
method = "knn", trControl=fitControl)
knn.fit
plot(knn.fit)
nearZeroVarCols <- nearZeroVar(clean.data)
View(clean.data)
glimpse(clean.data)
lda.fit <- train(Disease ~ ., data = clean.data, method = "lda")
lda.fit$finalModel
lda.fit
fitControl <- trainControl(
method = "repeatedcv",
number = 5, repeats = 3)
knn.fit <- train(Disease ~ ., data = clean.data,
method = "knn", trControl=fitControl)
knn.fit
plot(knn.fit)
ggplot(data = mpg,aes(x=cyl,y=hwy)) + geom_point(size = 2)+
labs(x="Cylinder",y="Miles on Highway",title = "Miles on Highway vs No of Cylinders")
ggplot2(data = mpg,aes(x=cyl,y=hwy)) + geom_point(size = 2)+
labs(x="Cylinder",y="Miles on Highway",title = "Miles on Highway vs No of Cylinders")
library("ggplot2")
library("tidyverse")
#1.a--------------
glimpse(mpg)
data(mpg,package = "ggplot2")
ggplot(data = mpg,aes(x=cyl,y=hwy)) + geom_point(size = 2)+
labs(x="Cylinder",y="Miles on Highway",title = "Miles on Highway vs No of Cylinders")
count(mpg, drv, class)+
labs(x="Drv",y="Class")
ggplot(data = mpg,aes(x=drv,y=class)) + geom_point(size = 2)
count(mpg, drv, class)+
labs(x="Drv",y="Class")
ggplot(data=mpg , aes(x=displ, y= hwy,color= cty))+geom_point() #Instead of changing the color, it plots different shades of color,
#For categorical it will plot different colors.
ggplot(data=mpg , aes(x=displ, y= hwy,size= cty))+geom_point()  #For shapes its same for both categorical and continuous variable, It will have different shapes per category
ggplot(data=mpg , aes(x=displ, y= hwy,shape= cty))+geom_point() #It will throw an error as continuous variable cannot be mapped to shape.
#Categorical Variables
ggplot(data=mpg , aes(x=drv, y= class,color= manufacturer))+geom_point() #plot with different colors as per category.
ggplot(data=mpg , aes(x=drv, y= class,size= manufacturer))+geom_point() #plot different sizes as per category.
ggplot(data=mpg , aes(x=drv, y= class,shape= manufacturer))+geom_point() #different shapes as per category.
ggplot(data=mpg, aes(x=hwy, y=hwy,size=hwy,color=hwy)) + geom_point() #Repeating the same variable for multiple aesthetics is redundant
#3.3.1 #6
ggplot(data=mpg, aes(x=displ, y=hwy,color=displ<4)) + geom_point() #ggplot() function will adapt to the expression and will plot the points
# which are <4 as True in blue color and False in red color which are greater than and equal to 4.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))+
facet_wrap(~ class, nrow = 2)
#Advantages: With Facets we get different plot with category whereas with color aes,It can be difficult to identify different
# colors assigned for different categories.
#Dis Advantages: With Facets it is difficult to compare values of different categories as we get separate plots for every category. While in color aes we get single plot
# which is easier to compare.
#1.b------------------
ggplot(mpg, aes(displ, hwy)) + facet_wrap(~drv, ncol = 3) + labs(y="Highway MPG", x="Displacement")+
#facetwrap to split it into 3 plots
geom_point(color='grey') + geom_smooth(method = loess , formula = y ~ x,size = 1.40) +
#geom_point to change scatter dots color, geom_smooth for loess smoothing
geom_jitter(position = "jitter", alpha = 0.125) +
#geom_jitter to make overlapping scatter dots transparent
geom_smooth(method = lm, se = FALSE,color ='black',size = 1.40) + theme_bw()
#method lm for linear smoothing and black color and size for line color and thickness.
#2----------------------
Hdata = read.csv("housingData.csv")
summary(Hdata)
ggplot(data = Hdata, aes(x = YearBuilt, fill = GarageQual)) +  #Year Built with Garage Quality.
geom_bar(position = "dodge") +labs(x="Year Built", y="Count",title ="Year Built with Garage Quality")
#From above graph We can conclude most of the houses have Average Garage Quality.
ggplot(data= Hdata, aes(x= OverallCond)) +
geom_density(fill="#69b3a2", color="#FFA500", alpha=0.8) +
labs(x="Overall Condition Rating", y ="Density",title = "Overall Condition Rating") +
ggtitle("Distribution of Overall Condition of Houses")
#distribution Overall condition of Houses is at 5 i.e. Most of the houses are in Average Condition.
ggplot(Hdata, aes(x=YearBuilt, y= (SalePrice)/1000, size=PoolArea))+
geom_point(color = 'dark grey') +
geom_jitter(position = "jitter", alpha = 0.125) +
theme(legend.position="right") +
labs(x="Year Built", y ="Sales Price in 1000K")
#From the Graph below we can see pool area for almost all the Houses are same except for some instances and has no effect on Sales Prices
#with Houses Built.
theme_set(theme_bw())
g <- ggplot(Hdata, aes(Neighborhood,OverallQual))
g + geom_violin() +
labs(title="Violin plot",
subtitle="Overall Quality vs Neighborhoods",
caption="Source: Ames Housing Data",
x="Neighborhood",
y="Overall Quality")
#The plot shows the Overall Quality of Houses with respect to the Neighborhood they are in.
#We can conclude that North Ridge(NoRidge),Norht Ridge Heights(NridgHt) and Somerset(Somerst) has
#some of the highest rating whereas Brookside(BrkSide) has lowest ratings.
piechart <- ggplot(Hdata, aes(x = "", fill = factor(HouseStyle))) +
geom_bar(width = 1.5) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="House Style",
x=NULL,
y=NULL,
title="Pie Chart of House Style",
caption="Source: Ames Housing Data")
piechart + coord_polar(theta = "y", start=0)
#The Pie chart shows the Types of House styles with majority of House Stlyes being 1 Story.
